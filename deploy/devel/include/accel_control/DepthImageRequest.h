// Generated by gencpp from file accel_control/DepthImageRequest.msg
// DO NOT EDIT!


#ifndef ACCEL_CONTROL_MESSAGE_DEPTHIMAGEREQUEST_H
#define ACCEL_CONTROL_MESSAGE_DEPTHIMAGEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace accel_control
{
template <class ContainerAllocator>
struct DepthImageRequest_
{
  typedef DepthImageRequest_<ContainerAllocator> Type;

  DepthImageRequest_()
    : downsample(false)
    , post_process(false)  {
    }
  DepthImageRequest_(const ContainerAllocator& _alloc)
    : downsample(false)
    , post_process(false)  {
  (void)_alloc;
    }



   typedef uint8_t _downsample_type;
  _downsample_type downsample;

   typedef uint8_t _post_process_type;
  _post_process_type post_process;





  typedef boost::shared_ptr< ::accel_control::DepthImageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::accel_control::DepthImageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DepthImageRequest_

typedef ::accel_control::DepthImageRequest_<std::allocator<void> > DepthImageRequest;

typedef boost::shared_ptr< ::accel_control::DepthImageRequest > DepthImageRequestPtr;
typedef boost::shared_ptr< ::accel_control::DepthImageRequest const> DepthImageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::accel_control::DepthImageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::accel_control::DepthImageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::accel_control::DepthImageRequest_<ContainerAllocator1> & lhs, const ::accel_control::DepthImageRequest_<ContainerAllocator2> & rhs)
{
  return lhs.downsample == rhs.downsample &&
    lhs.post_process == rhs.post_process;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::accel_control::DepthImageRequest_<ContainerAllocator1> & lhs, const ::accel_control::DepthImageRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace accel_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::accel_control::DepthImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::accel_control::DepthImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accel_control::DepthImageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::accel_control::DepthImageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accel_control::DepthImageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::accel_control::DepthImageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::accel_control::DepthImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0017cf81c8686ffa5a53a9dcd54f443d";
  }

  static const char* value(const ::accel_control::DepthImageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0017cf81c8686ffaULL;
  static const uint64_t static_value2 = 0x5a53a9dcd54f443dULL;
};

template<class ContainerAllocator>
struct DataType< ::accel_control::DepthImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "accel_control/DepthImageRequest";
  }

  static const char* value(const ::accel_control::DepthImageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::accel_control::DepthImageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool downsample\n"
"bool post_process\n"
;
  }

  static const char* value(const ::accel_control::DepthImageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::accel_control::DepthImageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.downsample);
      stream.next(m.post_process);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DepthImageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::accel_control::DepthImageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::accel_control::DepthImageRequest_<ContainerAllocator>& v)
  {
    s << indent << "downsample: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.downsample);
    s << indent << "post_process: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.post_process);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACCEL_CONTROL_MESSAGE_DEPTHIMAGEREQUEST_H
